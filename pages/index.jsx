import Button from "@components/button";
import Section from "@components/section";
import RestaurantItem from "@components/restaurant_item";
import Head from "next/head";
import { useState } from "react";
import {getAllCategories, getAllRestaurants} from "@lib/api";
import RestaurantItemsList from "@components/restaurant_items_list";
import styles from "./index.module.scss";

import { Grid16Filled, List16Filled, ChevronDown16Filled } from "@fluentui/react-icons";
import Showcase from "@components/showcase";

const VIEW_MODE_NAME = "view-mode";


function containsCategory(category, item) {
	let data = item.node.restaurantTypes?.edges;
	if (!data) return false;
	for (let i = 0, length = data.length; i < length; i++) {
		if (data[i].node?.name === category) {
			return true;
		}
	}
	return false;
}

export async function getStaticProps() {
	const restaurants = await getAllRestaurants();
	const categories = await getAllCategories();
	return {
		props: {
			restaurants,
			categories,
		},
	}
}

export default function Home({ restaurants: allRestaurants, categories }) {
	const [restaurants, setRestaurants] = useState(allRestaurants);
	const [viewMode, setViewMode] = useState("grid");

	function handleFilterChange(evt) {
		const value = evt.target.value;
		if (!value || value === "Categories") {
			return setRestaurants(allRestaurants);
		}
		setRestaurants(allRestaurants.filter(containsCategory.bind(this, value)));
	}

	function handleViewModeChange(evt) {
		setViewMode(evt.target.value);
	}

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Showcase image="/hero-image.jpg">
				<h1>A guide to the best eating spots in Syracuse.</h1>
				<p>With hundreds of restaurants located with in the 315, there really is a little something for all tastes.</p>
				<Button href="#restaurants" kind="primary">View Restaurants</Button>
			</Showcase>
			<Section id="restaurants">
				<div className={styles.toolbar}>
					<label className={styles.filters} htmlFor="categories-filter">
						<span>Filters</span>
						<div className={styles.select}>
							<select name="categories-filter" id="categories-filter" onChange={handleFilterChange}>
								{categories.map((name) => <option key={name} value={name}>{name}</option>)}
							</select>
							<ChevronDown16Filled></ChevronDown16Filled>
						</div>
					</label>
					<div className={styles.modes}>
						<ViewModeItem value="grid" onChange={handleViewModeChange} checked={viewMode === "grid"}>
							<Grid16Filled></Grid16Filled>
						</ViewModeItem>
						<ViewModeItem value="list" onChange={handleViewModeChange} checked={viewMode === "list"}>
							<List16Filled></List16Filled>
						</ViewModeItem>
					</div>
				</div>
				{restaurants.length ?
					<RestaurantItemsList mode={viewMode}>
						{restaurants.map((data) => <RestaurantItem key={data.node.id} data={data} />)}
					</RestaurantItemsList>
					: <div>No Results</div>
				}
			</Section>
		</>
	);
}

function ViewModeItem({ value, children, checked, onChange }) {
	const name = VIEW_MODE_NAME;
	const id = value + "-" + name;
	return (
		<label htmlFor={id} className={styles.mode}>
			<input type="radio" name={name} id={id} value={value} onChange={onChange} checked={checked} />
			{children && children}
		</label>
	);
}
